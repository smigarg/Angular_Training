--------process.argv: 

You can access command-line arguments via the global process object. The
 process object has an argv property which is an array containing the
 complete command-line. i.e. process.argv.

 You'll need to think about how to loop through the number arguments so
 you can output just their sum. The first element of the process.argv array
 is always 'node', and the second element is always the path to your
 program.js file, so you need to start at the 3rd element (index 2), adding
 each item to the total until you reach the end of the array.

 Also be aware that all elements of process.argv are strings and you may
 need to coerce them into numbers. You can do this by prefixing the
 property with + or passing it to Number(). e.g. +process.argv[2] or
 Number(process.argv[2]).

---------file i/o operations


To perform a filesystem operation you are going to need the fs module from
the Node core library. To load this kind of module, or any other "global"
module, use the following incantation:

   var fs = require('fs')

Now you have the full fs module available in a variable named fs.

All synchronous (or blocking) filesystem methods in the fs module end with
'Sync'. To read a file, you'll need to use
fs.readFileSync('/path/to/file'). This method will return a Buffer object
containing the complete contents of the file.

Documentation on the fs module can be found by pointing your browser here:
file://C:\Users\Training\AppData\Roaming\npm\node_modules\learnyounode\nod
e_apidoc\fs.html

Buffer objects are Node's way of efficiently representing arbitrary arrays
of data, whether it be ascii, binary or some other format. Buffer objects
can be converted to strings by simply calling the toString() method on
them. e.g. var str = buf.toString().

Documentation on Buffers can be found by pointing your browser here:
file://C:\Users\Training\AppData\Roaming\npm\node_modules\learnyounode\nod
e_apidoc\buffer.html

If you're looking for an easy way to count the number of newlines in a
string, recall that a JavaScript String can be .split() into an array of
substrings and that '\n' can be used as a delimiter. Note that the test
file does not have a newline character ('\n') at the end of the last line,
so using this method you'll end up with an array that has one more element
than the number of newlines.


asynchronus exam,ple


  var fs = require('fs')
  var file = process.argv[2]

  fs.readFile(file, function (err, contents) {
    // fs.readFile(file, 'utf8', callback) can also be used
    var lines = contents.toString().split('\n').length - 1
    console.log(lines)
  })